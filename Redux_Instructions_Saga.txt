Redux Saga Sample Project Structure

src/
  assets/
  components/
    Posts/
    Auth/
    Reports/
    Shared/
  containers/
    PostList/
    Auth/
    Reports/
  store
    
---


Redux 
---
Step 0: 
  npm i redux@4.1.2 react-redux@7.2.6 redux-saga redux-devtools-extension

  The above mentioned versions are compatible with React v 17. 

  redux  - core redux framework 
  react-redux   -- patches up react with redux seamlessy 

Step 1: 
----
in src/configureStore.ts 
  import { createStore, applyMiddleware } from 'redux'
  import createSagaMiddleware from 'redux-saga'

  // We'll be using Redux Devtools. We can use the `composeWithDevTools()`
  // directive so we can pass our middleware along with it
  import { composeWithDevTools } from 'redux-devtools-extension' 
  // If you use react-router, don't forget to pass in your history type.
  import { createRootReducer, rootSaga } from './store'

  // Let's configue the store/ 
  // store configuration can have initialState and has to return store.
  export default function configureStore(history, initialState) {
    // create the composing function for our middlewares
    const composeEnhancers = composeWithDevTools({})
    // create the redux-saga middleware
    const sagaMiddleware = createSagaMiddleware()

    // We'll create our store with the combined reducers/sagas, and the initial Redux state that
    // we'll be passing from our entry point.
    const store = createStore(
      createRootReducer(history),
      initialState,
      composeEnhancers(applyMiddleware(sagaMiddleware))
    )

    // Don't forget to run the root saga, and return the store object.
    sagaMiddleware.run(rootSaga)
    return store;
  }



Step 2:
----
  in src/store/posts/reducer.ts 
    
  const postReducer = (state = [], action) => {
    switch (action.type) {
      case 'ADD_POST':
        return state;

      default: 
        return state;
    }
  }

  export default postReducer;
    


Step 3:
in src/store/index.ts 

  import { combineReducers } from 'redux'
  import { all, fork } from 'redux-saga/effects'
  import { History } from 'history'

  // Whenever an action is dispatched, Redux will update each top-level application state property
  // using the reducer with the matching name. It's important that the names match exactly, and that
  // the reducer acts on the corresponding ApplicationState property type.
  export const createRootReducer = (history) =>
    combineReducers({
      posts: postsReducer   //error here
    })


Step 4: 
in store/posts/reducer.js,
  import { postsReducer } from './posts/reducer'

  and the error will go off

======


===
Step 5: 
----  
  in store/posts/types.js
    have the following actions 

  // Define however naming conventions you'd like for your action types, but
  // personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention
  // of Redux's `@@INIT` action.
  export const CREATE_REQUEST = '@@posts/CREATE_REQUEST';  // for create post
  export const CREATE_SUCCESS = '@@posts/CREATE_SUCCESS';   // // for create post - success
  export const CREATE_ERROR = '@@posts/CREATE_ERROR';   // // for create post - error

  export const FETCH_REQUEST = '@@posts/FETCH_REQUEST';  // for get all posts
  export const FETCH_SUCCESS = '@@posts/FETCH_SUCCESS';  // for get all posts success
  export const FETCH_ERROR = '@@posts/FETCH_ERROR';      // for post related errors
  
  export const FETCH_REQUEST_BY_ID = '@@posts/FETCH_REQUEST_BY_ID';   // for get post by id 
  export const FETCH_SUCCESS_BY_ID = '@@posts/FETCH_SUCCESS_BY_ID';   // for get post by id - success 
  export const UPDATE_REQUEST_BY_ID = '@@posts/UPDATE_REQUEST_BY_ID';  // for update post by id
  export const UPDATE_SUCCESS_BY_ID = '@@posts/UPDATE_SUCCESS_BY_ID'   // // for update post by id - success


Step 6: 
===
in store/posts/reducer.ts 
Add proper switch cases as we have possible action types for our project identified

case PostsActionTypes.CREATE_REQUEST || 
         PostsActionTypes.FETCH_REQUEST || 
         PostsActionTypes.FETCH_REQUEST_BY_ID || 
         PostsActionTypes.UPDATE_REQUEST_BY_ID: 
      return { ...state, loading: true }

case PostsActionTypes.CREATE_SUCCESS: 
    return state;

case PostsActionTypes.FETCH_SUCCESS: 
  return state;

case PostsActionTypes.FETCH_ERROR: 
  return state;

case PostsActionTypes.FETCH_SUCCESS_BY_ID: 
  return state;

case PostsActionTypes.UPDATE_SUCCESS_BY_ID: 
  return state;


Step 7: 
===
  Fix the errors in src/store/index.js 
  --
  path may be corrected.. 


Step 8:
-----
  create store/posts/sagas.ts for  features 


  generator function for handling ajax calls    -- handler 
    it will send ajax calls 
    get the resp and yield the result to reducers 


  generator function for watching over the req from component   -- watcher 
    watcher function will be actively watching for actions from components 
    upon getting actions then the handler will be called 

  import { call, takeEvery } from "redux-saga/effects";
  import { fetchError, fetchSuccess } from "./actions";
  import { FETCH_REQUEST } from "./types"

  function* handleFetch() {
    try {
      // To call async functions, use redux-saga's `call()`.
      const res = yield call(callApi, 'get', API_ENDPOINT)

      if (res.error) {
        yield put(fetchError(res.error))
      } else {
        yield put(fetchSuccess(res))
      }
    } catch (err) {
      if (err instanceof Error && err.stack) {
        yield put(fetchError(err.stack))
      } else {
        yield put(fetchError('An unknown error occured.'))
      }
    }
  }

  // This is our watcher function. We use `take*()` functions to watch Redux for a specific action
  // type, and run our saga, for example the `handleFetch()` saga above.
  function* watchFetchRequest() {
    yield takeEvery(FETCH_REQUEST, handleFetch)
  }


Step 9:
---- 
fix the import related errors in the sagas.ts 
---
  import { all, call, fork, put, takeEvery } from 'redux-saga/effects'
  import { PostsActionTypes } from './types'
  import { callApi } from '../../utils/api';

  const API_ENDPOINT = 'http://jsonplaceholder.typicode.com/posts';

Step 10:
----
  Have util file in src/utils/api.js 
  
  have the following code 

  export async function callApi(method, url, data) {
    const res = await fetch( url, {
      method,
      headers: {
        Accept: 'application/json'
      },
      body: JSON.stringify(data)
    })
    return res.json();
  }


Step 11:
  have store/posts/actions.js file with the following code 
  let's work with handling the resp and patching it up the reducer 
  these functions with action types only helps reducers capture them in switch case 


  import { PostsActionTypes } from './types';
  export const fetchRequest = () => action(PostsActionTypes.FETCH_REQUEST)

  // Remember, you can also pass parameters into an action creator. Make sure to
  // type them properly as well.
  export const fetchSuccess = (data: Post[]) => action(PostsActionTypes.FETCH_SUCCESS, data)
  export const fetchError = (message: string) => action(PostsActionTypes.FETCH_ERROR, message)

Step 12: [May Not be Required]
====
  /* in src/store/posts/types.ts

  have the following code on top of all lines

  export interface Post extends ApiResponse{
    id?: number
    title?: string
    body?: string
  }

  // This type is basically shorthand for `{ [key: string]: any }`. 
  // Feel free to replace `any` with
  // the expected return type of your API response.
  export type ApiResponse = Record<string, any>
  */

Step 13:  [May Not be Required]
----
  to fix error in actions.ts 
  install the following package
    
    npm i typesafe-actions
  
Step 14: 
---
  in src/store/posts/sagas.js 
  
  at last write the following lines 
  
  // We can also use `fork()` here to split our saga into multiple watchers.
  function* postsSaga() {
    yield all([
        fork(watchFetchRequest)
    ])
  }

  export default postsSaga;
  
====

Step 15: 
---
  in store/index.js 

  now, like our posts feature is having a saga, many features will also have on their own. 

  so, we have to make rootSaga out of all sagas .

  have these imports in the same file 
  import { all, fork } from 'redux-saga/effects';
  import postsSaga from './posts/sagas';


  at last the mentioned file... 

  // Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a
  // "generator function", which you can read about here:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
  export function* rootSaga() {
    yield all(
      [fork(postsSaga),
      // another feature's saga will come here
    ])
  }

Step 16: [May not Required]
===
  in src/main.js  

  import * as React from 'react'
  import { Provider } from 'react-redux'
  import { ConnectedRouter } from 'connected-react-router'
  import { Store } from 'redux';
  import { History } from 'history';

  import { ApplicationState } from './store'
  import App from './App';

  // Any additional component props go here.
  interface MainProps {
    store: Store<ApplicationState>
    history: History
  }

  // Create an intersection type of the component props and our Redux props.
  const Main: React.FC<MainProps> = ({ store, history }) => {
    return (
      <Provider store={store}>
        <ConnectedRouter history={history}>
          <App />
        </ConnectedRouter>
      </Provider>
    )
  }

  // Normally you wouldn't need any generics here (since types infer from the passed functions).
  // But since we pass some props from the `index.js` file, we have to include them.
  // For an example of a `connect` function without generics, see `./containers/LayoutContainer`.
  export default Main;


== 
Step 17: 
----
  in src/index.js have the following code and understand 


  import { Provider } from 'react-redux';
  import configureStore from './configureStore';
  import { createBrowserHistory } from 'history';

  const history = createBrowserHistory();
  const initialState = 'INITIAL_REDUX_STATE'

  const store = configureStore(history, initialState);

  ReactDOM.render(
    <React.StrictMode>
      <Provider store={store}>
        <App />
      </Provider>
    </React.StrictMode>,
    document.getElementById('root')
  );

=====

Step 18: [May not be required]
--- 
  have a type definition for environment variables 
  
  in src/react-app-env.d.ts 

  have the following code 

    /// <reference types="react-scripts" />

    interface Window {
      INITIAL_REDUX_STATE: any
    }

=====
Step 19: [May not be required]
--- 
  in PostList.js 
  
  Let's make it a container

  before the comp class begins... write the following 

  import { ApplicationState } from '../store';
  import { Post } from '../store/posts/types';
  import { fetchRequest } from '../store/posts/actions'

  // Separate state props + dispatch props to their own interfaces.
  interface PropsFromState {
    loading: boolean
    postList: Post[]
    errors?: string
  }

  // We can use `typeof` here to map our dispatch types to the props, like so.
  interface PropsFromDispatch {
    fetchRequest: typeof fetchRequest
  }

  // Combine both state + dispatch props - as well as any props we want to pass - in a union type.
  type AllProps = PropsFromState & PropsFromDispatch

  class PostList extends Component<AllProps> {
    

Step 20:
===
  
  after the comp class definitions are over... 
  at the end of the class.. have the following code

  

  // It's usually good practice to only include one context at a time in a connected component.
  // Although if necessary, you can always include multiple contexts. Just make sure to
  // separate them from each other to prevent prop conflicts.
  const mapStateToProps = ({ posts }) => {
    console.log(posts);
    return {
      loading: posts.loading,
      errors: posts.errors,
      postList: posts.postList
    }
  }

  // mapDispatchToProps is especially useful for constraining our actions to the connected component.
  // You can access these via `this.props`.
  const mapDispatchToProps = {
    fetchRequest
  }

  // Now let's connect our component!
  // With redux v4's improved typings, we can finally omit generics here.
  export default connect(
    mapStateToProps,
    mapDispatchToProps
  )(PostList);

  // fix the connect method related error  by importing  'import { connect } from 'react-redux';' 
  // and another error by importing 
            import { fetchRequest } from '../store/posts/actions'

=====

Step 21: 
---
  in comp class 

  componentDidMount() {
    console.log(this.props);
    const { fetchRequest } = this.props;
    fetchRequest()
  }

=========

Step 22: 
  import React, { Component } from 'react';
  import { NavLink, RouteComponentProps } from "react-router-dom";
  import { connect } from 'react-redux';
  import { Card, Spin } from 'antd';
  import Title from 'antd/lib/typography/Title';

  import { ApplicationState } from '../store';
  import { Post } from '../store/posts/types';
  import { fetchRequest } from '../store/posts/actions'

  // Separate state props + dispatch props to their own interfaces.
  interface PropsFromState {
    loading: boolean
    postList: Post[]
    errors?: string
  }

  // We can use `typeof` here to map our dispatch types to the props, like so.
  interface PropsFromDispatch {
    fetchRequest: typeof fetchRequest
  }

  // Combine both state + dispatch props - as well as any props we want to pass - in a union type.
  type AllProps = PropsFromState & PropsFromDispatch

  //const API_ENDPOINT = 'http://jsonplaceholder.typicode.com/posts';


  class PostList extends Component<AllProps> {

    componentDidMount() {
      console.log(this.props);
      const { fetchRequest } = this.props;
      fetchRequest()
    }

    render() {
      console.log(this.props); 
      const { postList } = this.props;

      let allPosts = null;

      allPosts = postList.map(post => {
        return (
          <Card title={post.title} style={{ width: "100%" }} key={`card${post.id}`}>
            <p>
              {post.body}
            </p>
            <NavLink to={`/posts/${post.id}`}>View More... </NavLink>
          </Card>
        )
      })

      return (
        <>
          <Title level={2}>View Posts</Title>
          
            { postList && postList.length > 0 ? 
                allPosts :
                <Spin size="large" />
            }
          
        </>
      )
    }
  }

  // It's usually good practice to only include one context at a time in a connected component.
  // Although if necessary, you can always include multiple contexts. Just make sure to
  // separate them from each other to prevent prop conflicts.
  const mapStateToProps = ({ posts }: ApplicationState) => {
    console.log(posts);
    return {
      loading: posts.loading,
      errors: posts.errors,
      postList: posts.postList
    }
  }

  // mapDispatchToProps is especially useful for constraining our actions to the connected component.
  // You can access these via `this.props`.
  const mapDispatchToProps = {
    fetchRequest
  }

  // Now let's connect our component!
  // With redux v4's improved typings, we can finally omit generics here.
  export default connect(
    mapStateToProps,
    mapDispatchToProps
  )(PostList)


=====

Step 23: 
----
  Add the following lines in actions.ts 


  // for post details 
  export const fetchRequestById = (postId: string) => action(PostsActionTypes.FETCH_REQUEST_BY_ID, postId)
  export const fetchSuccessById = (data: Post) => action(PostsActionTypes.FETCH_SUCCESS_BY_ID, data);


Step 24: 
----

in store/posts/sagas.ts

function* handleFetchById(action: ReturnType<typeof fetchRequestById>) {
  try {
    // To call async functions, use redux-saga's `call()`.
    const res = yield call(callApi, 'get', `${API_ENDPOINT}/${action.payload}` )

    if (res.error) {
      yield put(fetchError(res.error))
    } else {
      yield put(fetchSuccessById(res))
    }
  } catch (err) {
    if (err instanceof Error && err.stack) {
      yield put(fetchError(err.stack))
    } else {
      yield put(fetchError('An unknown error occured.'))
    }
  }
}

function* watchFetchById() {
  yield takeEvery(PostsActionTypes.FETCH_REQUEST_BY_ID, handleFetchById)
}


add the following in the same file, before last line of export statement

// We can also use `fork()` here to split our saga into multiple watchers.
function* postsSaga() {
  yield all([
      fork(watchFetchRequest), 
      fork(watchFetchById)
  ])
}


Step 25: 
----
  in store/posts/reducer.ts

  first case statment should be the following
    case PostsActionTypes.CREATE_REQUEST || 
          PostsActionTypes.FETCH_REQUEST || 
          PostsActionTypes.FETCH_REQUEST_BY_ID || 
          PostsActionTypes.UPDATE_REQUEST_BY_ID: 
        return { ...state, loading: true }

  and handle the case for FETCH_SUCCESS_BY_ID also. 

  case PostsActionTypes.FETCH_SUCCESS_BY_ID: 
      return { ...state, loading: false, post: action.payload }



Step 26:
----
  in PostDetails.tsx 
    send a call from the component 

  before the class write the following ,

    // Separate state props + dispatch props to their own interfaces.
    interface PropsFromState {
      loading: boolean
      post: any
      errors?: string,
      status?: boolean
    }

    interface PropsFromDispatch {
      getPostById: typeof fetchRequestById
    }

    interface RouteParams {
      id: string
    }

    // Combine both state + dispatch props - as well as any props we want to pass - in a union type.
    type AllProps = PropsFromState & PropsFromDispatch & RouteComponentProps<RouteParams>


  in the class 
    class PostDetails extends Component<AllProps>  {


  after the class 
    work with mapStateToProps and mapDispatchToProps

   
    // It's usually good practice to only include one context at a time in a connected component.
    // Although if necessary, you can always include multiple contexts. Just make sure to
    // separate them from each other to prevent prop conflicts.
    const mapStateToProps = ({ posts }: ApplicationState) => {
      console.log(posts);
      return{
        post: posts.post,
        errors: posts.errors,
        status: posts.status
      }
    }

    // mapDispatchToProps is especially useful for constraining our actions to the connected component.
    // You can access these via `this.props`.
    const mapDispatchToProps: PropsFromDispatch = {
      getPostById: fetchRequestById
    }

    // Now let's connect our component!
    // With redux v4's improved typings, we can finally omit generics here.
    export default connect(
      mapStateToProps,
      mapDispatchToProps
    )(PostDetails); 


Step 27: 
-----
  In PostDetails.tsx,

  have the componentDidMount block 

  componentDidMount() {
    const { match, getPostById } = this.props;
    
    getPostById(match.params.id);
  }


  and then, in the render() method 

  render() {
    console.log(this.props);
    const { loading, post } = this.props;

    

    // for getting updated form data during submit 
    //Refer https://ant.design/components/form/#components-form-demo-form-in-modal
    // and  https://ant.design/components/modal/

    return (
      <div>
        <Title level={2}>View Post Details</Title>
        { post?
            <Card title={post.title} style={{ width: '100%' }}>
              <p>{post.body}</p>
              
              <Button type="primary" onClick={this.showModal}>Edit</Button> <Button danger>Delete</Button>
              <Modal
                title="Basic Modal"
                visible={this.state.visible}
                footer={[
                  <Button key="back" onClick={this.handleCancel}>
                    Cancel
                  </Button>,
                  <Button form="myForm" type="primary" key="submit" htmlType="submit">
                    Update
                  </Button>

                ]}
              >
                <Form
                  id='myForm'
                  initialValues={{
                    'title': post.title,
                    'body': post.body
                  }}
                  {...layout}
                  name="basic"
                  onFinish={this.onFinish}
                  onFinishFailed={this.onFinishFailed}
              >
                <Form.Item
                  label="Post Title"
                  name="title"                  
                  rules={[{ required: true, message: 'Please input your postTitle!' }]}
                >
                  <Input/>
                </Form.Item>

                <Form.Item
                  label="Post Body"
                  name="body"
                  rules={[{ required: true, message: 'Please input your postContent!' }]}
                >
                  <Input.TextArea />
                </Form.Item>

                
              </Form>
              </Modal>
            </Card>
          :
          <Spin size="large" />
        }
        
      </div>
    )
  }


Step 28: 
====
Check the app. PostDetails will work fine.. 
 Let's work on Update Post
  in store/posts/actions.ts


  // for post details update
  export const updateRequestById = (post: Post) => action(PostsActionTypes.UPDATE_REQUEST_BY_ID, post)
  export const updateSuccessById = (data: Post) => action(PostsActionTypes.UPDATE_SUCCESS_BY_ID, data);


Step 29:
====

  function* handleUpdateById(action: ReturnType<typeof updateRequestById>) {
    try {
      // To call async functions, use redux-saga's `call()`.
      const res = yield call(callApi, 'put', `${API_ENDPOINT}/${action.payload.id}` )

      if (res.error) {
        yield put(fetchError(res.error))
      } else {
        yield put(updateSuccessById(res))
      }
    } catch (err) {
      if (err instanceof Error && err.stack) {
        yield put(fetchError(err.stack))
      } else {
        yield put(fetchError('An unknown error occured.'))
      }
    }
  }

  function* watchUpdateById() {
    yield takeEvery(PostsActionTypes.UPDATE_REQUEST_BY_ID, handleUpdateById)
  }


Step 30:
=====
  in the same sagas.ts file, add the following at last.. before the export 

  // We can also use `fork()` here to split our saga into multiple watchers.
  function* postsSaga() {
    yield all([
        fork(watchFetchRequest), 
        fork(watchFetchById),
        fork(watchUpdateById)
    ])
  }

  export default postsSaga;


Step 31: 
=====
  in store/posts/reducer.ts

  add the following case also..

    case PostsActionTypes.UPDATE_SUCCESS_BY_ID: 
      // in this if/else check for status code.. json placeholder doesn't give it
      if(action.payload){
        return { ...state, loading: false, status: true}
      }else{
        return { ...state, loading: false, status: false}
      }
      


Stpe 32:
===
   
   before render() in PostDetails.tsx,

   onFinish = (values: any) => {
  
    values.id = this.props.post.id;
    console.log('Submitting...', values);
    this.props.putPostById(values);
  };

  onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  openNotificationWithIcon = (statusType: boolean) => {
    if(statusType){
      notification['success']({
        message: 'Success',
        description:
          'Your Post has been updated',
      });
    }else{
      notification['error']({
        message: 'Error',
        description:
          'Unable to Update the post. Some error occured',
      });
    }
    
  };

  componentDidUpdate(){
    if(this.props && this.props.status){
      this.openNotificationWithIcon(this.props.status)
    } //Todo: write else block also
  }



after the class in over, you add the following

// mapDispatchToProps is especially useful for constraining our actions to the connected component.
// You can access these via `this.props`.
const mapDispatchToProps: PropsFromDispatch = {
  getPostById: fetchRequestById,
  putPostById: updateRequestById
}


Step 33:
====
  in PostDetails.tsx,
  before the class comp, add the following

  interface PropsFromDispatch {
    getPostById: typeof fetchRequestById,
    putPostById: typeof updateRequestById
  }


  Then, check you app. Update will also work if you import antd notification comp
  ====

Step 34:
===
Let's work on add post 

in store/posts/actions.ts 

  // for add post 
  export const createRequest = (post: Post) => {
    console.log(post);
    return action(PostsActionTypes.CREATE_REQUEST, post)
  }
  export const createSuccess = (data: Post) => {
    console.log(data);
    return action(PostsActionTypes.CREATE_SUCCESS, data);
  }


Step 35:
====

  in store/posts/sagas.ts, add the handler and watcher 


  function* handleCreate(action: ReturnType<typeof createRequest>) {
    try {
      // To call async functions, use redux-saga's `call()`.
      const res = yield call(callApi, 'post', `${API_ENDPOINT}`, action.payload )
      if (res.error) {
        yield put(fetchError(res.error));
      } else {
        yield put(createSuccess(res));
      }
    } catch (err) {
      if (err instanceof Error && err.stack) {
        yield put(fetchError(err.stack))
      } else {
        yield put(fetchError('An unknown error occured.'))
      }
    }
  }

  function* watchCreate() {
    yield takeEvery(PostsActionTypes.CREATE_REQUEST, handleCreate)
  }


  in the same file before export,
   

  // We can also use `fork()` here to split our saga into multiple watchers.
  function* postsSaga() {
    yield all([
        fork(watchCreate),
        fork(watchFetchRequest), 
        fork(watchFetchById),
        fork(watchUpdateById)
    ])
  }

  export default postsSaga;

=== 

Step 36:
--
  in store/posts/reducer.ts 

  adding one more case 

    case PostsActionTypes.CREATE_SUCCESS: 
        return { 
              ...state, loading: false, 
              postList: [...state.postList, action.payload ], 
              post: action.payload 
        }


Step 37:
=====
  in PostForm.tsx,

  before the comp class begins, 


    // Separate state props + dispatch props to their own interfaces.
    interface PropsFromState {
      post: Post
      errors?: string
    }

    interface PropsFromDispatch {
      addPost: typeof createRequest
    }

    // Combine both state + dispatch props - as well as any props we want to pass - in a union type.
    type AllProps = PropsFromState & PropsFromDispatch


    class PostForm extends Component<AllProps> {
      


  and after the class comp is ended.. have the following code...


    // It's usually good practice to only include one context at a time in a connected component.
    // Although if necessary, you can always include multiple contexts. Just make sure to
    // separate them from each other to prevent prop conflicts.
    const mapStateToProps = ({ posts }: ApplicationState) => {
      console.log(posts);
      return{
        post: posts.post,
        errors: posts.errors
      }
    }

    // mapDispatchToProps is especially useful for constraining our actions to the connected component.
    // You can access these via `this.props`.
    const mapDispatchToProps: PropsFromDispatch = {
      addPost: createRequest
    }

    // Now let's connect our component!
    // With redux v4's improved typings, we can finally omit generics here.
    export default connect(
      mapStateToProps,
      mapDispatchToProps
    )(PostForm);



----
Step 38:
  =====

  Submit the form data from PostForm.tsx 


    onFinish = (values: any) => {
      console.log("Success:", values);
      // submit this data
      this.props.addPost(values);
    };

    Then,
    work on showing notification.


TODO: Work on Delete Post

------------



MVVM 
---
  Model: Redux's store Data 
 
  View-Model (VM):  Component-related code that manages simple state, 
                    passes data directly onto View, potentially passes data 
                    directly back from View

  View (V): How the visuals look (JSX, CSS)

  Read this: 
  https://stackoverflow.com/questions/51506440/mvvm-architectural-pattern-for-a-reactjs-application